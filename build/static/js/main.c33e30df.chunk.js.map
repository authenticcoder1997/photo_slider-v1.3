{"version":3,"sources":["components/Loader.js","components/Heading.js","App.js","serviceWorker.js","index.js"],"names":["Loading","styled","div","Loader","className","Header","header","H1","h1","Input","input","Button","button","Heading","type","placeholder","GlobalStyle","createGlobalStyle","WrapperImages","section","App","indexes","useState","images","setImage","dispImg","setDisp","cardIndex","setIndex","useEffect","fetchImages","count","apiRoot","accessKey","axios","get","then","res","data","UnsplashImage","url","rurl","description","console","log","src","alt","width","height","object-fit","onClick","showImage","display","dispImgStyle","setStyle","hashmap","Map","map","image","index","set","urls","regular","key","dataLength","length","next","hasMore","loader","small","full","style","decrment","increment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c33e30df.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Loading = styled.div`\n\ntext-align: center;\n.lds-ellipsis {\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n}\n.lds-ellipsis div {\n  position: absolute;\n  top: 33px;\n  width: 13px;\n  height: 13px;\n  border-radius: 50%;\n  background: #222;\n  animation-timing-function: cubic-bezier(0, 1, 1, 0);\n}\n.lds-ellipsis div:nth-child(1) {\n  left: 8px;\n  animation: lds-ellipsis1 0.6s infinite;\n}\n.lds-ellipsis div:nth-child(2) {\n  left: 8px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n.lds-ellipsis div:nth-child(3) {\n  left: 32px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n.lds-ellipsis div:nth-child(4) {\n  left: 56px;\n  animation: lds-ellipsis3 0.6s infinite;\n}\n@keyframes lds-ellipsis1 {\n  0% {\n    transform: scale(0);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n@keyframes lds-ellipsis3 {\n  0% {\n    transform: scale(1);\n  }\n  100% {\n    transform: scale(0);\n  }\n}\n@keyframes lds-ellipsis2 {\n  0% {\n    transform: translate(0, 0);\n  }\n  100% {\n    transform: translate(24px, 0);\n  }\n}\n`;\n\nexport const Loader = () => {\n  return (\n    <Loading>\n      <div className=\"lds-ellipsis\">\n        <div>\n        </div>\n        <div>\n        </div>\n        <div>\n        </div>\n        <div>\n        </div>\n      </div>\n    </Loading>\n  )\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Header = styled.header`\n  max-width: 70rem;\n  margin: 2rem auto;\n  text-align: center;\n`;\n\nconst H1 = styled.h1`\n  font-family: 'Oswald', sans-serif;\n  margin-bottom: 1em;\n`;\n\nconst Input = styled.input`\n  height: 2.5rem;\n  width: 20rem;\n  margin-top: 1em;\n  outline: none;\n  text-indent: 1em;\n  font-size: 1em;\n\n  ::placeholder {\n    font-size: .8em;\n  }\n`;\n\nconst Button = styled.button`\n  height: 2.5rem;\n  padding: 0 1em;\n  outline: none;\n  cursor: pointer;\n  background: #222;\n  border: none;\n  color: #fff;\n  font-size: 1em;\n`;\n\n const Heading = () => {\n  return (\n    <Header>\n      <H1>Spinterest</H1>\n      <p>The internetâ€™s source of freely usable images.</p>\n      <p>Enjoy the wide variety of images</p>\n      <form>\n        <Input type=\"text\" placeholder=\"Search photos\" />\n        <Button>Search</Button>\n      </form>\n    </Header>\n  )\n}\n\nexport default Heading;\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from './components/Loader';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport './components/App.css';\n\nimport styled from 'styled-components';\nimport { createGlobalStyle } from 'styled-components';\nimport Heading from './components/Heading'\n\n// Style\nconst GlobalStyle = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: sans-serif;\n  }\n`;\n\nconst WrapperImages = styled.section`\n  max-width: 120rem;\n  margin: 4rem auto;\n  display: grid;\n  grid-gap: 1em;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  grid-auto-rows: 300px;\n`;\n\nconst App=()=> {\n  var indexes=0;\n  const [images, setImage] = useState([]);\n  const [dispImg,setDisp]=useState('');\n  const [cardIndex,setIndex]=useState(0);\n\n  useEffect(() => {\n    fetchImages();\n  }, [])\n\n  const fetchImages = (count = 10) => {\n    const apiRoot = \"https://api.unsplash.com\";\n    const accessKey = \"_-7bxPNM099GVvmhMMEB7xRtQQTKmKnf3tPPI72X7lw\";\n\n    axios\n      .get(`${apiRoot}/photos/random?client_id=${accessKey}&count=${count}`)\n      .then(res => {\n        setImage([...images, ...res.data]);\n      })\n  }\n  const UnsplashImage = ({ url,  rurl,description}) => {\n    console.log(indexes/2+\" \"+rurl+\" \"+description);\n    indexes=indexes+1;\n    return (\n      <div className=\"card\">\n        <img src={url} alt={description} width= \"100%\" height=\"100%\" object-fit=\"cover\"/>\n        <div className=\"card--info\">\n          <h1 className=\"card--title\">{description}</h1>\n          <br></br>\n          <button onClick={()=>showImage(indexes/2,rurl)}>Preview</button>\n        </div>\n      </div>\n    )\n  };\n\n  const [dispImgStyle,setStyle]=useState({display:'none'});\n  let hashmap=new Map();\n  images.map((image,index) =>\n    hashmap.set(index,image.urls.regular)\n  );\n  const showImage=(key,rurl)=>{\n      setDisp(rurl);\n      setIndex(key);\n      // cardIndex=key;\n      setStyle({display:'flex'});\n  }\n  const closeDisp=()=>{\n    setStyle({display:'none'});\n  }\n\n  // const breakpointColumnsObj = {\n  //   default: 6,\n  //   1200: 3,\n  //   992:3,\n  //   768:2,\n  //   576:1,\n  // };\n  console.log(images);\n\n  return (\n    <>\n    <div>\n      <Heading/>\n      <GlobalStyle />\n      <InfiniteScroll\n        dataLength={images.length}\n        next={fetchImages}\n        hasMore={true}\n        loader={<Loader />}\n      >\n        {/* <Masonry breakpointCols={breakpointColumnsObj} className=\"container\" columnClassName=\"container-grid_column\"> */}\n        <WrapperImages className=\"container\">\n          {images.map(image => (\n            <UnsplashImage url={image.urls.small} rurl={image.urls.full} description={image.description}/>\n          ))}\n        </WrapperImages>\n        {/* </Masonry> */}\n      </InfiniteScroll>\n    </div>\n    <section className='lightbox' style={dispImgStyle}>\n        <div className='close' onClick={closeDisp}>close</div>\n        <div className='carousel left' onClick={()=>{\n          let decrment=cardIndex-1;\n          showImage(decrment,hashmap.get(decrment));\n        }}>  \n        </div>\n        <div className='carousel right' onClick={()=>{\n          let increment=cardIndex+1;\n          showImage(increment,hashmap.get(increment));\n        }}>\n        </div>\n        <img src={dispImg} alt=\"failed\"/>\n      </section>\n    </>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}